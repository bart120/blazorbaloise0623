@using System.Reflection;
@using Microsoft.AspNetCore.Components.WebAssembly.Services;

@inject LazyAssemblyLoader assemblyLoader

<Error>
    <Router AppAssembly="@typeof(App).Assembly" OnNavigateAsync="OnNavigateAsync" AdditionalAssemblies="@assemblies">
        <Found Context="routeData">
            <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <p role="alert">Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>
</Error>


@code {
    private List<Assembly> assemblies = new();

    private async Task OnNavigateAsync(NavigationContext context)
    {
        if (context.Path == "lazy")
        {
            var ass = await assemblyLoader.LoadAssembliesAsync(new[] { "LazyLibrary.dll" });
            assemblies.AddRange(ass);
        }
        if (context.Path.Contains("cars"))
        {
            var ass = await assemblyLoader.LoadAssembliesAsync(new[] { "CarsLibrary.dll" });
            assemblies.AddRange(ass);
        }
    }
}