@page "/cars/list"
@using Microsoft.JSInterop;
@using MyComponentsLibrary.Services;
@using ServicesLibrary.Models;
@using ServicesLibrary.Services;

@inject IJSRuntime jsRuntime
@inject CarsService servCars
@inject ToastService toast;

<h3>Liste des voitures</h3>
@if(cars !=  null){
<table class="table table-dark table-striped table-hover">
    <thead>
        <tr>
            <th scope="col">Modèle</th>
            <th scope="col">Prix</th>
            <th scope="col">Date de circulation</th>
            <th scope="col" colspan="2">Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var car in cars)
        {
            <tr>
                <td scope="row">@car.Model</td>
                <td>@car.Price</td>
                <td>@car.DateOfCirculation.ToShortDateString()</td>
                <td><NavLink class="btn btn-secondary" href="@($"cars/detail/{car.ID}?nom={car.Model}")">Voir</NavLink></td>
                <td><button class="btn btn-warning" @onclick="()=>delete(car.ID)">Suppr.</button></td>
            </tr>
        }
    </tbody>
</table>
}

@code {
    private List<Car>? cars;

    [CascadingParameter]
    public Action<Exception> ProcessError { get; set; }

    private async Task delete(int id)
    {
        var test = await jsRuntime.InvokeAsync<bool>("confirm", $"Voulez-vous supprimer la voiture {id}");
        if (test)
        {
            await servCars.DeleteById(id);
            this.cars = await servCars.GetAllAsync();
            //this.cars.Remove(this.cars.Find(x => x.ID == id));
            //await jsRuntime.InvokeVoidAsync("alert", $"La voiture avec l'ID {id} est supprimée.");
            toast.Show("Suppr.", $"La voiture avec l'ID {id} est supprimée.", MyComponentsLibrary.ToastLevel.Info);
        }

    }

    protected override async Task OnInitializedAsync()
    {

        try
        {
            this.cars = await servCars.GetAllAsync();
        }
        catch(Exception e)
        {
            ProcessError.Invoke(e);
        }
    }
}
